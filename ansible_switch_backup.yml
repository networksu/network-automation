---
# Playbook: switch_backup.yml
# Description: Backs up switch configurations directly to GitHub
# For use with containerized AWX without persistent volumes

- name: Backup Network Switch Configurations
  hosts: switch_stack_B_A
  gather_facts: false
  vars:
    # Temporary backup path inside container (will be lost after container restart)
    temp_backup_path: "/tmp/switch_backups"

  tasks:
    - name: Create temporary backup directory
      file:
        path: "{{ temp_backup_path }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true
      become: yes

    - name: Backup Cisco IOS switch configurations
      ios_config:
        backup: yes
        backup_options:
          filename: "{{ inventory_hostname }}.cfg"
          dir_path: "{{ temp_backup_path }}"
      register: backup_results

    - name: Initialize Git repo in temp directory
      shell: |
        cd {{ temp_backup_path }}
        git init
        git config user.name "salwan.mohamed"
        git config user.email "salwan.mohamed@su.edu.eg"
        git remote add origin "https://salwan.mohamed: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@github.com/networksu/su_network_backup.git"
      delegate_to: localhost
      run_once: true
      become: yes

    - name: Create README with list of switches
      shell: |
        cd {{ temp_backup_path }}
        echo "# Switch Configuration Backups" > README.md
        echo "" >> README.md
        echo "Last updated: $(date)" >> README.md
        echo "" >> README.md
        echo "## Switches included:" >> README.md
        echo "" >> README.md
        for cfg in $(find . -name "*.cfg" | sort); do
          basename=$(basename "$cfg" .cfg)
          echo "- $basename" >> README.md
        done
      delegate_to: localhost
      run_once: true
      become: yes

    - name: Commit and push to GitHub
      shell: |
        cd {{ temp_backup_path }}
        git add -A
        git commit -m "Switch configurations - $(date +%Y%m%d_%H%M%S)"
        git push -f origin master
      delegate_to: localhost
      run_once: true
      become: yes
      register: git_result
      ignore_errors: yes
      
    - name: Display Git push result
      debug:
        var: git_result.stdout_lines
      run_once: true
