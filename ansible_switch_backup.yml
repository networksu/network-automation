---
# Playbook: switch_backup.yml
# Description: Backs up switch configurations and saves them to a persistent directory
# Runs on Ansible AWX (installed on Minikube)

- name: Backup Network Switch Configurations
  hosts: switch_stack_B_A
  gather_facts: false
  vars:
    # Paths
    temp_backup_path: "/tmp/switch_backups"
    host_backup_path: "/var/lib/awx/projects/switch_backups"

  tasks:
    - name: Ensure temporary backup directory exists
      file:
        path: "{{ temp_backup_path }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true
      become: yes

    - name: Ensure persistent host backup directory exists
      file:
        path: "{{ host_backup_path }}"
        state: directory
        mode: '0777'  # Avoid permission issues
      delegate_to: localhost
      run_once: true
      become: yes

    - name: Backup Cisco IOS switch configurations
      ios_config:
        backup: yes
        backup_options:
          filename: "{{ inventory_hostname }}.cfg"
          dir_path: "{{ temp_backup_path }}"
      register: backup_results

    - name: Display backup path
      debug:
        msg: "Backup saved to: {{ backup_results.backup_path }}"
      when: backup_results is defined

    # Copy the backup files to the persistent host directory
    - name: Copy backup files to persistent storage
      copy:
        src: "{{ temp_backup_path }}/{{ inventory_hostname }}.cfg"
        dest: "{{ host_backup_path }}/{{ inventory_hostname }}.cfg"
        mode: '0644'
        remote_src: yes
      delegate_to: localhost
      become: yes
      when: backup_results is defined and backup_results.backup_path is defined

    - name: Verify backup files exist in persistent storage
      find:
        paths: "{{ host_backup_path }}"
        patterns: "*.cfg"
      delegate_to: localhost
      register: existing_backups

    - name: Show existing backup files
      debug:
        msg: "Existing backup files: {{ existing_backups.files | map(attribute='path') | list }}"
      run_once: true

    - name: Fail if no backup files were found
      fail:
        msg: "No backup files found in {{ host_backup_path }}. The script will not run!"
      when: existing_backups.matched == 0

    # GitHub Push Script
    - name: Ensure GitHub push script is in place
      copy:
        dest: "/var/lib/awx/projects/push_configs.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          # GitHub push script with error handling

          BACKUP_PATH="/var/lib/awx/projects/switch_backups"
          GIT_USER="salwan.mohamed"
          GIT_EMAIL="salwan.mohamed@su.edu.eg"
          GIT_TOKEN="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"

          LOG_FILE="/var/lib/awx/projects/github_push.log"

          echo "==== Starting GitHub push script at $(date) ====" > $LOG_FILE

          log() { echo "$1" | tee -a $LOG_FILE; }

          error_exit() {
            log "ERROR: $1"
            exit 1
          }

          log "Checking backup directory: $BACKUP_PATH"
          [ -d "$BACKUP_PATH" ] || error_exit "Backup directory does not exist"

          cd "$BACKUP_PATH" || error_exit "Failed to access backup directory"

          log "Verifying backup files..."
          ls -la | tee -a $LOG_FILE

          # Git operations
          [ -d ".git" ] && { log "Removing existing Git repo"; rm -rf .git; }
          
          log "Initializing Git repository..."
          git init >> $LOG_FILE 2>&1 || error_exit "Failed to initialize Git"

          log "Configuring Git..."
          git config user.name "$GIT_USER"
          git config user.email "$GIT_EMAIL"

          log "Setting up Git remote..."
          git remote add origin "https://$GIT_USER:$GIT_TOKEN@github.com/networksu/su_network_backup.git"

          # Create README
          log "Creating README file..."
          echo "# Switch Configuration Backups" > README.md
          echo "" >> README.md
          echo "Last updated: $(date)" >> README.md
          echo "" >> README.md
          echo "## Switches included:" >> README.md
          echo "" >> README.md
          for cfg in $(find . -name "*.cfg" | sort); do
            basename=$(basename "$cfg" .cfg)
            echo "- $basename" >> README.md
          done

          log "Adding files to Git..."
          git add -A || error_exit "Failed to add files to Git"

          log "Committing changes..."
          git commit -m "Switch configurations - $(date +%Y%m%d_%H%M%S)" || log "Nothing to commit"

          log "Pushing to GitHub..."
          git push -f origin main || error_exit "Failed to push to GitHub"

          log "Successfully completed at $(date)"
          exit 0
      delegate_to: localhost
      run_once: true
      become: yes

    - name: Run GitHub push script
      shell: "/var/lib/awx/projects/push_configs.sh"
      delegate_to: localhost
      run_once: true
      become: yes

    - name: Show push script log if exists
      shell: "cat /var/lib/awx/projects/github_push.log || echo 'Log file not found'"
      delegate_to: localhost
      run_once: true
      register: git_log
      become: yes
      ignore_errors: yes

    - name: Display git push log
      debug:
        var: git_log.stdout_lines
      run_once: true
